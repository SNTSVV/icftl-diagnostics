# Generated from peclMultiSpec.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,200,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,
        6,4,6,71,8,6,11,6,12,6,72,1,6,1,6,1,7,3,7,78,8,7,1,7,4,7,81,8,7,
        11,7,12,7,82,1,7,1,7,4,7,87,8,7,11,7,12,7,88,3,7,91,8,7,1,8,4,8,
        94,8,8,11,8,12,8,95,1,9,1,9,1,10,4,10,101,8,10,11,10,12,10,102,1,
        10,1,10,1,11,1,11,5,11,109,8,11,10,11,12,11,112,9,11,1,11,1,11,1,
        12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,25,4,25,197,8,25,11,25,12,25,198,0,0,26,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,1,
        0,5,4,0,45,58,65,90,95,95,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,
        10,13,13,5,0,46,46,49,57,65,90,95,95,97,122,208,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,
        0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,60,1,0,0,0,9,63,1,0,0,0,11,65,
        1,0,0,0,13,68,1,0,0,0,15,77,1,0,0,0,17,93,1,0,0,0,19,97,1,0,0,0,
        21,100,1,0,0,0,23,106,1,0,0,0,25,115,1,0,0,0,27,117,1,0,0,0,29,119,
        1,0,0,0,31,121,1,0,0,0,33,130,1,0,0,0,35,142,1,0,0,0,37,151,1,0,
        0,0,39,162,1,0,0,0,41,170,1,0,0,0,43,176,1,0,0,0,45,179,1,0,0,0,
        47,184,1,0,0,0,49,189,1,0,0,0,51,196,1,0,0,0,53,54,5,60,0,0,54,2,
        1,0,0,0,55,56,5,62,0,0,56,4,1,0,0,0,57,58,5,60,0,0,58,59,5,61,0,
        0,59,6,1,0,0,0,60,61,5,62,0,0,61,62,5,61,0,0,62,8,1,0,0,0,63,64,
        5,61,0,0,64,10,1,0,0,0,65,66,5,33,0,0,66,67,5,61,0,0,67,12,1,0,0,
        0,68,70,5,34,0,0,69,71,7,0,0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,70,
        1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,75,5,34,0,0,75,14,1,0,0,0,
        76,78,5,45,0,0,77,76,1,0,0,0,77,78,1,0,0,0,78,80,1,0,0,0,79,81,7,
        1,0,0,80,79,1,0,0,0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,
        90,1,0,0,0,84,86,5,46,0,0,85,87,7,1,0,0,86,85,1,0,0,0,87,88,1,0,
        0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,84,1,0,0,0,90,91,
        1,0,0,0,91,16,1,0,0,0,92,94,7,1,0,0,93,92,1,0,0,0,94,95,1,0,0,0,
        95,93,1,0,0,0,95,96,1,0,0,0,96,18,1,0,0,0,97,98,5,10,0,0,98,20,1,
        0,0,0,99,101,7,2,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,
        0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,105,6,10,0,0,105,22,1,0,
        0,0,106,110,5,35,0,0,107,109,8,3,0,0,108,107,1,0,0,0,109,112,1,0,
        0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,
        0,0,113,114,6,11,0,0,114,24,1,0,0,0,115,116,5,40,0,0,116,26,1,0,
        0,0,117,118,5,41,0,0,118,28,1,0,0,0,119,120,5,44,0,0,120,30,1,0,
        0,0,121,122,5,100,0,0,122,123,5,117,0,0,123,124,5,114,0,0,124,125,
        5,97,0,0,125,126,5,116,0,0,126,127,5,105,0,0,127,128,5,111,0,0,128,
        129,5,110,0,0,129,32,1,0,0,0,130,131,5,116,0,0,131,132,5,105,0,0,
        132,133,5,109,0,0,133,134,5,101,0,0,134,135,5,66,0,0,135,136,5,101,
        0,0,136,137,5,116,0,0,137,138,5,119,0,0,138,139,5,101,0,0,139,140,
        5,101,0,0,140,141,5,110,0,0,141,34,1,0,0,0,142,143,5,119,0,0,143,
        144,5,104,0,0,144,145,5,101,0,0,145,146,5,110,0,0,146,147,5,101,
        0,0,147,148,5,118,0,0,148,149,5,101,0,0,149,150,5,114,0,0,150,36,
        1,0,0,0,151,152,5,101,0,0,152,153,5,118,0,0,153,154,5,101,0,0,154,
        155,5,110,0,0,155,156,5,116,0,0,156,157,5,117,0,0,157,158,5,97,0,
        0,158,159,5,108,0,0,159,160,5,108,0,0,160,161,5,121,0,0,161,38,1,
        0,0,0,162,163,5,46,0,0,163,164,5,100,0,0,164,165,5,117,0,0,165,166,
        5,114,0,0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,103,0,0,
        169,40,1,0,0,0,170,171,5,118,0,0,171,172,5,97,0,0,172,173,5,108,
        0,0,173,174,5,117,0,0,174,175,5,101,0,0,175,42,1,0,0,0,176,177,5,
        105,0,0,177,178,5,110,0,0,178,44,1,0,0,0,179,180,5,78,0,0,180,181,
        5,111,0,0,181,182,5,110,0,0,182,183,5,101,0,0,183,46,1,0,0,0,184,
        185,5,84,0,0,185,186,5,114,0,0,186,187,5,117,0,0,187,188,5,101,0,
        0,188,48,1,0,0,0,189,190,5,70,0,0,190,191,5,97,0,0,191,192,5,108,
        0,0,192,193,5,115,0,0,193,194,5,101,0,0,194,50,1,0,0,0,195,197,7,
        4,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,
        0,0,0,199,52,1,0,0,0,10,0,72,77,82,88,90,95,102,110,198,1,6,0,0
    ]

class peclMultiSpecLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    STR = 7
    REAL = 8
    INT = 9
    NEWLINE = 10
    WS = 11
    LINE_COMMENT = 12
    LB = 13
    RB = 14
    COMMA = 15
    DURATION = 16
    TIMEBETWEEN = 17
    WHENEVER = 18
    EVENTUALLY = 19
    DURING = 20
    VALUEKWS = 21
    IN = 22
    PYTHONNONE = 23
    PYTHONTRUE = 24
    PYTHONFALSE = 25
    ID = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'>'", "'<='", "'>='", "'='", "'!='", "'\\n'", "'('", 
            "')'", "','", "'duration'", "'timeBetween'", "'whenever'", "'eventually'", 
            "'.during'", "'value'", "'in'", "'None'", "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "STR", "REAL", "INT", "NEWLINE", "WS", "LINE_COMMENT", "LB", 
            "RB", "COMMA", "DURATION", "TIMEBETWEEN", "WHENEVER", "EVENTUALLY", 
            "DURING", "VALUEKWS", "IN", "PYTHONNONE", "PYTHONTRUE", "PYTHONFALSE", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "STR", 
                  "REAL", "INT", "NEWLINE", "WS", "LINE_COMMENT", "LB", 
                  "RB", "COMMA", "DURATION", "TIMEBETWEEN", "WHENEVER", 
                  "EVENTUALLY", "DURING", "VALUEKWS", "IN", "PYTHONNONE", 
                  "PYTHONTRUE", "PYTHONFALSE", "ID" ]

    grammarFileName = "peclMultiSpec.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


